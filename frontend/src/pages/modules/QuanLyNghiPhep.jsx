import React, { useState, useEffect } from "react";
import axios from "axios";
import NghiPhepForm from "../../components/nghiphep/NghiPhepForm";
import {
  Modal,
  Button,

  Table,
  Breadcrumb,
} from "react-bootstrap";
import { useNavigate } from "react-router-dom";
import { toast } from "react-toastify";

const API_URL = "http://127.0.0.1:5000/api";

const QuanLyNghiPhep = () => {
  const [nghiPhepList, setNghiPhepList] = useState([]);
  const [searchKeyword, setSearchKeyword] = useState("");
  const [filterTrangThai, setFilterTrangThai] = useState("");
  const [editingNghiPhep, setEditingNghiPhep] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [nhanVienList, setNhanVienList] = useState([]);
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    fetchNghiPhep();
    fetchNhanVien();
  }, []);

  const fetchNghiPhep = async () => {
    setLoading(true);
    try {
      const response = await axios.get(`${API_URL}/get-all-nghi-phep`);
      setNghiPhepList(response.data);
    } catch (error) {
      console.error("L·ªói khi g·ªçi API ngh·ªâ ph√©p:", error);
      toast.error("C√≥ l·ªói x·∫£y ra khi t·∫£i danh s√°ch ngh·ªâ ph√©p!");
    } finally {
      setLoading(false);
    }
  };

  const fetchNhanVien = async () => {
    try {
      const response = await axios.get(`${API_URL}/get-all-nhan-vien`);
      setNhanVienList(response.data);
    } catch (error) {
      console.error("L·ªói khi g·ªçi API nh√¢n vi√™n:", error);
      toast.error("C√≥ l·ªói x·∫£y ra khi t·∫£i danh s√°ch nh√¢n vi√™n!");
    }
  };

  const handleAdd = () => {
    setEditingNghiPhep(null);
    setShowModal(true);
  };

  const handleEdit = (nghiPhep) => {
    setEditingNghiPhep(nghiPhep);
    setShowModal(true);
  };

  const handleDelete = async (id) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy ƒë∆°n ngh·ªâ ph√©p n√†y kh√¥ng?")) {
      try {
        await axios.put(`${API_URL}/cancle-nghi-phep/${id}`);
        fetchNghiPhep();
        toast.success("ƒê√£ h·ªßy ƒë∆°n ngh·ªâ ph√©p th√†nh c√¥ng!");
      } catch (error) {
        console.error("L·ªói khi h·ªßy ƒë∆°n ngh·ªâ ph√©p:", error);
        toast.error("C√≥ l·ªói x·∫£y ra khi h·ªßy ƒë∆°n ngh·ªâ ph√©p!");
      }
    }
  };

  const handleDuyet = async (id) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën duy·ªát ƒë∆°n ngh·ªâ ph√©p n√†y kh√¥ng?")) {
      try {
        await axios.put(`${API_URL}/approve-nghi-phep/${id}`);
        fetchNghiPhep();
        fetchNhanVien();
        toast.success("ƒê√£ duy·ªát ƒë∆°n ngh·ªâ ph√©p th√†nh c√¥ng!");
      } catch (error) {
        console.error("L·ªói khi duy·ªát ƒë∆°n ngh·ªâ ph√©p:", error);
        toast.error("C√≥ l·ªói x·∫£y ra khi duy·ªát ƒë∆°n ngh·ªâ ph√©p!");
      }
    }
  };

  const handleTuChoi = async (id) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën t·ª´ ch·ªëi ƒë∆°n ngh·ªâ ph√©p n√†y kh√¥ng?")) {
      try {
        await axios.put(`${API_URL}/reject-nghi-phep/${id}`);
        fetchNghiPhep();
        toast.success("ƒê√£ t·ª´ ch·ªëi ƒë∆°n ngh·ªâ ph√©p th√†nh c√¥ng!");
      } catch (error) {
        console.error("L·ªói khi t·ª´ ch·ªëi ƒë∆°n ngh·ªâ ph√©p:", error);
        toast.error("C√≥ l·ªói x·∫£y ra khi t·ª´ ch·ªëi ƒë∆°n ngh·ªâ ph√©p!");
      }
    }
  };

  const handleModalClose = () => {
    setShowModal(false);
    setEditingNghiPhep(null);
  };

  const handleFormSubmit = () => {
    fetchNghiPhep();
    handleModalClose();
  };

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date instanceof Date && !isNaN(date) ? date.toLocaleDateString("vi-VN") : "Ng√†y kh√¥ng h·ª£p l·ªá";
  };

  const nhanVienMap = nhanVienList.reduce((acc, nv) => {
    acc[nv.id] = nv.ho_ten.toLowerCase();
    return acc;
  }, {});

  const filteredList = nghiPhepList.filter((np) => {
    const searchMatch =
      np.ly_do.toLowerCase().includes(searchKeyword.toLowerCase()) ||
      (nhanVienMap[np.nhan_vien_id] && nhanVienMap[np.nhan_vien_id].includes(searchKeyword.toLowerCase()));
    const statusMatch = filterTrangThai ? np.trang_thai === filterTrangThai : true;
    return searchMatch && statusMatch;
  });

  return (
    <div className="container min-vh-100">
      <div className="row">
        <div className="col-12 mt-5">
          <Breadcrumb className="mt-3">
            <Breadcrumb.Item onClick={() => navigate("/")}>Trang ch·ªß</Breadcrumb.Item>
            <Breadcrumb.Item active>Qu·∫£n l√Ω ngh·ªâ ph√©p</Breadcrumb.Item>
          </Breadcrumb>
          <Button variant="secondary" onClick={() => navigate("/")}>‚Üê Trang ch·ªß</Button>
          <div className="d-flex justify-content-between align-items-center mb-3">
            <h2 className="text-center flex-grow-1">Qu·∫£n l√Ω ƒë∆°n ngh·ªâ ph√©p</h2>
          </div>


          <div className="row mb-3">
            <div className="col-md-6 mb-2">
              <input
                type="text"
                className="form-control "
                placeholder="üîç T√¨m theo t√™n nh√¢n vi√™n ho·∫∑c l√Ω do..."
                value={searchKeyword}
                onChange={(e) => setSearchKeyword(e.target.value)}
              />
            </div>
            <div className="col-md-6 mb-2">
              <select
                className="form-select rounded-pill"
                value={filterTrangThai}
                onChange={(e) => setFilterTrangThai(e.target.value)}
              >
                <option value="">-- T·∫•t c·∫£ tr·∫°ng th√°i --</option>
                <option value="Ch·ªù duy·ªát">Ch·ªù duy·ªát</option>
                <option value="ƒê√£ duy·ªát">ƒê√£ duy·ªát</option>
                <option value="T·ª´ ch·ªëi">T·ª´ ch·ªëi</option>
                <option value="ƒê√£ h·ªßy">ƒê√£ h·ªßy</option>
              </select>
            </div>
          </div>

          <div className="d-flex justify-content-end mb-3">
            <button className="btn btn-outline-success px-4" onClick={handleAdd}>
              + Th√™m ƒë∆°n ngh·ªâ ph√©p
            </button>
          </div>

          <div className="table-responsive">
            <Table bordered hover striped className="rounded">
              <thead className="table-dark text-center">
                <tr>
                  <th>Nh√¢n vi√™n</th>
                  <th>T·ª´ ng√†y</th>
                  <th>ƒê·∫øn ng√†y</th>
                  <th>T·ªïng ng√†y ngh·ªâ</th>
                  <th>L√Ω do</th>
                  <th>Tr·∫°ng th√°i</th>
                  <th>H√†nh ƒë·ªông</th>
                </tr>
              </thead>
              <tbody>
                {loading ? (
                  <tr>
                    <td colSpan="7" className="text-center">ƒêang t·∫£i d·ªØ li·ªáu...</td>
                  </tr>
                ) : filteredList.length > 0 ? (
                  filteredList.map((nghiPhep) => (
                    <tr key={nghiPhep.id}>
                      <td>{nhanVienList.find((nv) => nv.id === nghiPhep.nhan_vien_id)?.ho_ten || "Kh√¥ng r√µ"}</td>
                      <td>{formatDate(nghiPhep.tu_ngay)}</td>
                      <td>{formatDate(nghiPhep.den_ngay)}</td>
                      <td>{nghiPhep.so_ngay_nghi}</td>
                      <td>{nghiPhep.ly_do}</td>
                      <td className="text-center">
                        <span className={`badge ${nghiPhep.trang_thai === "Ch·ªù duy·ªát"
                          ? "bg-warning text-dark"
                          : nghiPhep.trang_thai === "ƒê√£ duy·ªát"
                            ? "bg-success"
                            : nghiPhep.trang_thai === "T·ª´ ch·ªëi"
                              ? "bg-danger"
                              : "bg-secondary"
                          }`}>
                          {nghiPhep.trang_thai}
                        </span>
                      </td>
                      <td>
                        {nghiPhep.trang_thai === "Ch·ªù duy·ªát" && (
                          <>
                            <button className="btn btn-sm btn-outline-success me-1" onClick={() => handleDuyet(nghiPhep.id)}>
                              ‚úî Duy·ªát
                            </button>
                            <button className="btn btn-sm btn-outline-danger me-1" onClick={() => handleTuChoi(nghiPhep.id)}>
                              ‚úñ T·ª´ ch·ªëi
                            </button>
                            <button className="btn btn-sm btn-outline-danger me-1" onClick={() => handleDelete(nghiPhep.id)}>
                              üóë H·ªßy
                            </button>
                          </>
                        )}
                        {["Ch·ªù duy·ªát", "T·ª´ ch·ªëi"].includes(nghiPhep.trang_thai) && (
                          <button className="btn btn-sm btn-outline-warning" onClick={() => handleEdit(nghiPhep)}>
                            ‚úèÔ∏è S·ª≠a
                          </button>
                        )}
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan="7" className="text-center text-muted">
                      Kh√¥ng c√≥ ƒë∆°n ngh·ªâ ph√©p n√†o ph√π h·ª£p
                    </td>
                  </tr>
                )}
              </tbody>
            </Table>
          </div>


          {/* Modal th√™m/s·ª≠a ƒë∆°n ngh·ªâ ph√©p */}
          <Modal show={showModal} onHide={handleModalClose} size="lg">
            <Modal.Header closeButton>
              <Modal.Title>
                {editingNghiPhep ? "Ch·ªânh s·ª≠a ƒë∆°n ngh·ªâ ph√©p" : "Th√™m ƒë∆°n ngh·ªâ ph√©p"}
              </Modal.Title>
            </Modal.Header>
            <Modal.Body>
              <NghiPhepForm
                onAdded={handleFormSubmit}
                editingNghiPhep={editingNghiPhep}
                setEditingNghiPhep={setEditingNghiPhep}
              />
            </Modal.Body>
            <Modal.Footer>
              <Button variant="secondary" onClick={handleModalClose}>
                ƒê√≥ng
              </Button>
            </Modal.Footer>
          </Modal>
        </div></div></div>

  );
};

export default QuanLyNghiPhep;
